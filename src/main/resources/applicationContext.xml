<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath*:config.properties"/>

    <!-- 配置自动扫描目录 -->
    <context:component-scan base-package="com.mochousoft.base.service"/>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}"/>
        <!-- 如果空闲时间 > timeBetweenEvictionRunsMillis 则自动select=1连接一次数据库 -->
        <property name="testWhileIdle" value="${jdbc.pool.testWhileIdle}"/>
        <property name="testOnBorrow" value="${jdbc.pool.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.pool.testOnReturn}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc.pool.initialSize}"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${jdbc.pool.maxWait}"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>
        <!-- 当程序存在缺陷时，申请的连接忘记关闭，这时候，就存在连接泄漏了。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接 -->
        <!-- 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。在上面的配置中，如果连接超过30分钟未关闭，就会被强行回收，并且日志记录连接申请时的调用堆栈 -->
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${jdbc.pool.removeAbandoned}"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="${jdbc.pool.removeAbandonedTimeout}"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="${jdbc.pool.logAbandoned}"/>
        <!-- 监控数据库 -->
        <property name="filters" value="${jdbc.pool.filters}"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- Mybatis配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 指定mapper文件 -->
        <property name="mapperLocations" value="classpath*:mapper/**/*Mapper.xml"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <!-- 自动去指定包下查找映射器（Mapper）， 被发现的映射器将会使用Spring对自动侦测组件默认的命名策略来命名。 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定Mapper包，多个用逗号或者分号隔开。 -->
        <property name="basePackage" value="com.mochousoft.sfc.mapper"/>
    </bean>

    <!-- 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>